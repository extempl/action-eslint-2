"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = require("path");
const github_1 = require("@actions/github");
const core_1 = require("@actions/core");
const { GITHUB_TOKEN, GITHUB_SHA, GITHUB_WORKSPACE } = process.env;
const ACTION_NAME = 'ESLint';
const EXTENSIONS = new Set(['.ts', '.js', '.tsx', '.jsx']);
async function lint(files) {
    const { CLIEngine } = await Promise.resolve().then(() => require(path_1.join(process.cwd(), 'node_modules/eslint')));
    const cli = new CLIEngine({
        extensions: [...EXTENSIONS],
        ignorePath: '.gitignore'
    });
    const report = cli.executeOnFiles(files || ['src']);
    const { results, errorCount, warningCount } = report;
    const levels = ['notice', 'warning', 'failure'];
    const annotations = [];
    const consoleOutput = [];
    const consoleLevels = [, 'warning', 'error'];
    for (const res of results) {
        const { filePath, messages } = res;
        const path = filePath.substring(GITHUB_WORKSPACE.length + 1);
        for (const msg of messages) {
            const { line, endLine, column, endColumn, severity, ruleId, message } = msg;
            const annotationLevel = levels[severity];
            const consoleLevel = consoleLevels[severity];
            annotations.push({
                path,
                start_line: line,
                end_line: endLine || line,
                start_column: column,
                end_column: endColumn || column,
                annotation_level: annotationLevel,
                title: ruleId || ACTION_NAME,
                message: `${message}${ruleId ? `\nhttps://eslint.org/docs/rules/${ruleId}` : ''}`
            });
            consoleOutput.push(`${path}\n`);
            consoleOutput.push(`##[${consoleLevel}]  ${line}:${column}  ${consoleLevel}  ${message}  ${ruleId}\n\n`);
        }
    }
    console.log(consoleOutput.join(''));
    return {
        conclusion: errorCount > 0 ? 'failure' : 'success',
        output: {
            title: ACTION_NAME,
            summary: `${errorCount} error(s), ${warningCount} warning(s) found`,
            annotations
        }
    };
}
async function run() {
    const octokit = new github_1.GitHub(GITHUB_TOKEN);
    let currentSha;
    let info;
    let lintFiles;
    if (github_1.context.issue && github_1.context.issue.number) {
        info = await octokit.graphql(`query($owner: String!, $name: String!, $prNumber: Int!) {
			repository(owner: $owner, name: $name) {
				pullRequest(number: $prNumber) {
					files(first: 100) {
						nodes {
							path
						}
					}
					commits(last: 1) {
						nodes {
							commit {
								oid
							}
						}
					}
				}
			}
		}`, {
            owner: github_1.context.repo.owner,
            name: github_1.context.repo.repo,
            prNumber: github_1.context.issue.number
        });
        currentSha = info.repository.pullRequest.commits.nodes[0].commit.oid;
        const files = info.repository.pullRequest.files.nodes;
        lintFiles = files.filter((file) => EXTENSIONS.has(path_1.extname(file.path)) && !file.path.includes('.d.ts')).map((f) => f.path);
    }
    else {
        info = await octokit.repos.getCommit({ owner: github_1.context.repo.owner, repo: github_1.context.repo.repo, ref: GITHUB_SHA });
        currentSha = GITHUB_SHA;
        const files = info.data.files;
        lintFiles = files.filter(file => EXTENSIONS.has(path_1.extname(file.filename)) && !file.filename.includes('.d.ts') && file.status !== 'removed' && file.status !== 'changed').map(f => f.filename);
    }
    core_1.debug(`Commit: ${currentSha}`);
    let id;
    const jobName = core_1.getInput('job-name');
    if (jobName) {
        const checks = await octokit.checks.listForRef({
            ...github_1.context.repo,
            status: 'in_progress',
            ref: currentSha
        });
        const check = checks.data.check_runs.find(({ name }) => name.toLowerCase() === jobName.toLowerCase());
        if (check)
            id = check.id;
    }
    if (!id) {
        id = (await octokit.checks.create({
            ...github_1.context.repo,
            name: ACTION_NAME,
            head_sha: currentSha,
            status: 'in_progress',
            started_at: new Date().toISOString()
        })).data.id;
    }
    try {
        const lintAll = core_1.getInput('lint-all');
        const { conclusion, output } = await lint(lintAll ? null : lintFiles);
        await octokit.checks.update({
            ...github_1.context.repo,
            check_run_id: id,
            completed_at: new Date().toISOString(),
            conclusion,
            output
        });
        core_1.debug(output.summary);
        if (conclusion === 'failure')
            core_1.setFailed(output.summary);
    }
    catch (error) {
        await octokit.checks.update({
            ...github_1.context.repo,
            check_run_id: id,
            conclusion: 'failure',
            completed_at: new Date().toISOString()
        });
        core_1.setFailed(error.message);
    }
}
run();
//# sourceMappingURL=data:application/json;base64,