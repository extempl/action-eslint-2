"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = require("path");
const github_1 = require("@actions/github");
const core_1 = require("@actions/core");
const { GITHUB_TOKEN, GITHUB_SHA, GITHUB_WORKSPACE } = process.env;
const ACTION_NAME = 'ESLint';
const EXTENSIONS = new Set(['.ts', '.js', '.tsx', '.jsx']);
async function lint(files) {
    const { CLIEngine } = await Promise.resolve().then(() => require(path_1.join(process.cwd(), 'node_modules/eslint')));
    const cli = new CLIEngine({
        extensions: [...EXTENSIONS],
        ignorePath: '.gitignore'
    });
    const report = cli.executeOnFiles(files || ['src']);
    const { results, errorCount, warningCount } = report;
    const levels = ['notice', 'warning', 'failure'];
    const annotations = [];
    for (const res of results) {
        const { filePath, messages } = res;
        const path = filePath.substring(GITHUB_WORKSPACE.length + 1);
        for (const msg of messages) {
            const { line, endLine, column, endColumn, severity, ruleId, message } = msg;
            const annotationLevel = levels[severity];
            annotations.push({
                path,
                start_line: line,
                end_line: endLine || line,
                start_column: column,
                end_column: endColumn || column,
                annotation_level: annotationLevel,
                title: ruleId || ACTION_NAME,
                message
            });
        }
    }
    return {
        conclusion: errorCount > 0 ? 'failure' : 'success',
        output: {
            title: ACTION_NAME,
            summary: `${errorCount} error(s), ${warningCount} warning(s) found`,
            annotations
        }
    };
}
async function run() {
    const octokit = new github_1.GitHub(GITHUB_TOKEN);
    let currentSha;
    let info;
    let lintFiles;
    if (github_1.context.issue && github_1.context.issue.number) {
        info = await octokit.graphql(`query($owner: String!, $name: String!, $prNumber: Int!) {
			repository(owner: $owner, name: $name) {
				pullRequest(number: $prNumber) {
					files(first: 100) {
						nodes {
							path
						}
					}
					commits(last: 1) {
						nodes {
							commit {
								oid
							}
						}
					}
				}
			}
		}`, {
            owner: github_1.context.repo.owner,
            name: github_1.context.repo.repo,
            prNumber: github_1.context.issue.number
        });
        currentSha = info.repository.pullRequest.commits.nodes[0].commit.oid;
        const files = info.repository.pullRequest.files.nodes;
        lintFiles = files.filter((file) => EXTENSIONS.has(path_1.extname(file.path))).map((f) => f.path);
    }
    else {
        info = await octokit.repos.getCommit({ owner: github_1.context.repo.owner, repo: github_1.context.repo.repo, ref: GITHUB_SHA });
        currentSha = GITHUB_SHA;
        const files = info.data.files;
        lintFiles = files.filter(file => EXTENSIONS.has(path_1.extname(file.filename)) && !file.filename.includes('.d.ts') && file.status !== 'removed' && file.status !== 'changed').map(f => f.filename);
    }
    core_1.debug(`Commit: ${currentSha}`);
    let id;
    const jobName = core_1.getInput('job-name');
    if (jobName) {
        const checks = await octokit.checks.listForRef({
            ...github_1.context.repo,
            status: 'in_progress',
            ref: currentSha
        });
        const check = checks.data.check_runs.find(({ name }) => name.toLowerCase() === jobName.toLowerCase());
        if (check)
            id = check.id;
    }
    if (!id) {
        id = (await octokit.checks.create({
            ...github_1.context.repo,
            name: ACTION_NAME,
            head_sha: currentSha,
            status: 'in_progress',
            started_at: new Date().toISOString()
        })).data.id;
    }
    try {
        const lintAll = core_1.getInput('lint-all');
        const { conclusion, output } = await lint(lintAll ? null : lintFiles);
        await octokit.checks.update({
            ...github_1.context.repo,
            check_run_id: id,
            completed_at: new Date().toISOString(),
            conclusion,
            output
        });
        core_1.debug(output.summary);
        if (conclusion === 'failure')
            core_1.setFailed(output.summary);
    }
    catch (error) {
        await octokit.checks.update({
            ...github_1.context.repo,
            check_run_id: id,
            conclusion: 'failure',
            completed_at: new Date().toISOString()
        });
        core_1.setFailed(error.message);
    }
}
run();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5qcyIsInNvdXJjZVJvb3QiOiJzcmMvIiwic291cmNlcyI6WyJtYWluLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsK0JBQXFDO0FBRXJDLDRDQUFrRDtBQUNsRCx3Q0FBMkQ7QUFFM0QsTUFBTSxFQUFFLFlBQVksRUFBRSxVQUFVLEVBQUUsZ0JBQWdCLEVBQUUsR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDO0FBRW5FLE1BQU0sV0FBVyxHQUFHLFFBQVEsQ0FBQztBQUM3QixNQUFNLFVBQVUsR0FBRyxJQUFJLEdBQUcsQ0FBQyxDQUFDLEtBQUssRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUM7QUFFM0QsS0FBSyxVQUFVLElBQUksQ0FBQyxLQUFzQjtJQUN6QyxNQUFNLEVBQUUsU0FBUyxFQUFFLEdBQUcsMkNBQWEsV0FBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsRUFBRSxxQkFBcUIsQ0FBQyxFQUE0QixDQUFDO0lBQzFHLE1BQU0sR0FBRyxHQUFHLElBQUksU0FBUyxDQUFDO1FBQ3pCLFVBQVUsRUFBRSxDQUFDLEdBQUcsVUFBVSxDQUFDO1FBQzNCLFVBQVUsRUFBRSxZQUFZO0tBQ3hCLENBQUMsQ0FBQztJQUNILE1BQU0sTUFBTSxHQUFHLEdBQUcsQ0FBQyxjQUFjLENBQUMsS0FBSyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztJQUNwRCxNQUFNLEVBQUUsT0FBTyxFQUFFLFVBQVUsRUFBRSxZQUFZLEVBQUUsR0FBRyxNQUFNLENBQUM7SUFDckQsTUFBTSxNQUFNLEdBQThELENBQUMsUUFBUSxFQUFFLFNBQVMsRUFBRSxTQUFTLENBQUMsQ0FBQztJQUMzRyxNQUFNLFdBQVcsR0FBMEMsRUFBRSxDQUFDO0lBQzlELEtBQUssTUFBTSxHQUFHLElBQUksT0FBTyxFQUFFO1FBQzFCLE1BQU0sRUFBRSxRQUFRLEVBQUUsUUFBUSxFQUFFLEdBQUcsR0FBRyxDQUFDO1FBQ25DLE1BQU0sSUFBSSxH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SUFBSSxDQUFDLEVBQUUsQ0FBQztLQUNaO0lBRUQsSUFBSTtRQUNILE1BQU0sT0FBTyxHQUFHLGVBQVEsQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUNyQyxNQUFNLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBRSxHQUFHLE1BQU0sSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUN0RSxNQUFNLE9BQU8sQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDO1lBQzNCLEdBQUcsZ0JBQU8sQ0FBQyxJQUFJO1lBQ2YsWUFBWSxFQUFFLEVBQUU7WUFDaEIsWUFBWSxFQUFFLElBQUksSUFBSSxFQUFFLENBQUMsV0FBVyxFQUFFO1lBQ3RDLFVBQVU7WUFDVixNQUFNO1NBQ04sQ0FBQyxDQUFDO1FBQ0gsWUFBSyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUN0QixJQUFJLFVBQVUsS0FBSyxTQUFTO1lBQUUsZ0JBQVMsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUM7S0FDeEQ7SUFBQyxPQUFPLEtBQUssRUFBRTtRQUNmLE1BQU0sT0FBTyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUM7WUFDM0IsR0FBRyxnQkFBTyxDQUFDLElBQUk7WUFDZixZQUFZLEVBQUUsRUFBRTtZQUNoQixVQUFVLEVBQUUsU0FBUztZQUNyQixZQUFZLEVBQUUsSUFBSSxJQUFJLEVBQUUsQ0FBQyxXQUFXLEVBQUU7U0FDdEMsQ0FBQyxDQUFDO1FBQ0gsZ0JBQVMsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUM7S0FDekI7QUFDRixDQUFDO0FBRUQsR0FBRyxFQUFFLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBqb2luLCBleHRuYW1lIH0gZnJvbSAncGF0aCc7XG5pbXBvcnQgeyBDaGVja3NVcGRhdGVQYXJhbXNPdXRwdXRBbm5vdGF0aW9ucywgQ2hlY2tzQ3JlYXRlUGFyYW1zIH0gZnJvbSAnQG9jdG9raXQvcmVzdCc7XG5pbXBvcnQgeyBHaXRIdWIsIGNvbnRleHQgfSBmcm9tICdAYWN0aW9ucy9naXRodWInO1xuaW1wb3J0IHsgZ2V0SW5wdXQsIHNldEZhaWxlZCwgZGVidWcgfSBmcm9tICdAYWN0aW9ucy9jb3JlJztcblxuY29uc3QgeyBHSVRIVUJfVE9LRU4sIEdJVEhVQl9TSEEsIEdJVEhVQl9XT1JLU1BBQ0UgfSA9IHByb2Nlc3MuZW52O1xuXG5jb25zdCBBQ1RJT05fTkFNRSA9ICdFU0xpbnQnO1xuY29uc3QgRVhURU5TSU9OUyA9IG5ldyBTZXQoWycudHMnLCAnLmpzJywgJy50c3gnLCAnLmpzeCddKTtcblxuYXN5bmMgZnVuY3Rpb24gbGludChmaWxlczogc3RyaW5nW10gfCBudWxsKSB7XG5cdGNvbnN0IHsgQ0xJRW5naW5lIH0gPSBhd2FpdCBpbXBvcnQoam9pbihwcm9jZXNzLmN3ZCgpLCAnbm9kZV9tb2R1bGVzL2VzbGludCcpKSBhcyB0eXBlb2YgaW1wb3J0KCdlc2xpbnQnKTtcblx0Y29uc3QgY2xpID0gbmV3IENMSUVuZ2luZSh7XG5cdFx0ZXh0ZW5zaW9uczogWy4uLkVYVEVOU0lPTlNdLFxuXHRcdGlnbm9yZVBhdGg6ICcuZ2l0aWdub3JlJ1xuXHR9KTtcblx0Y29uc3QgcmVwb3J0ID0gY2xpLmV4ZWN1dGVPbkZpbGVzKGZpbGVzIHx8IFsnc3JjJ10pO1xuXHRjb25zdCB7IHJlc3VsdHMsIGVycm9yQ291bnQsIHdhcm5pbmdDb3VudCB9ID0gcmVwb3J0O1xuXHRjb25zdCBsZXZlbHM6IENoZWNrc1VwZGF0ZVBhcmFtc091dHB1dEFubm90YXRpb25zWydhbm5vdGF0aW9uX2xldmVsJ11bXSA9IFsnbm90aWNlJywgJ3dhcm5pbmcnLCAnZmFpbHVyZSddO1xuXHRjb25zdCBhbm5vdGF0aW9uczogQ2hlY2tzVXBkYXRlUGFyYW1zT3V0cHV0QW5ub3RhdGlvbnNbXSA9IFtdO1xuXHRmb3IgKGNvbnN0IHJlcyBvZiByZXN1bHRzKSB7XG5cdFx0Y29uc3QgeyBmaWxlUGF0aCwgbWVzc2FnZXMgfSA9IHJlcztcblx0XHRjb25zdCBwYXRoID0gZmlsZVBhdGguc3Vic3RyaW5nKEdJVEhVQl9XT1JLU1BBQ0UhLmxlbmd0aCArIDEpO1xuXHRcdGZvciAoY29uc3QgbXNnIG9mIG1lc3NhZ2VzKSB7XG5cdFx0XHRjb25zdCB7IGxpbmUsIGVuZExpbmUsIGNvbHVtbiwgZW5kQ29sdW1uLCBzZXZlcml0eSwgcnVsZUlkLCBtZXNzYWdlIH0gPSBtc2c7XG5cdFx0XHRjb25zdCBhbm5vdGF0aW9uTGV2ZWwgPSBsZXZlbHNbc2V2ZXJpdHldO1xuXHRcdFx0YW5ub3RhdGlvbnMucHVzaCh7XG5cdFx0XHRcdHBhdGgsXG5cdFx0XHRcdHN0YXJ0X2xpbmU6IGxpbmUsXG5cdFx0XHRcdGVuZF9saW5lOiBlbmRMaW5lIHx8IGxpbmUsXG5cdFx0XHRcdHN0YXJ0X2NvbHVtbjogY29sdW1uLFxuXHRcdFx0XHRlbmRfY29sdW1uOiBlbmRDb2x1bW4gfHwgY29sdW1uLFxuXHRcdFx0XHRhbm5vdGF0aW9uX2xldmVsOiBhbm5vdGF0aW9uTGV2ZWwsXG5cdFx0XHRcdHRpdGxlOiBydWxlSWQgfHwgQUNUSU9OX05BTUUsXG5cdFx0XHRcdG1lc3NhZ2Vcblx0XHRcdH0pO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiB7XG5cdFx0Y29uY2x1c2lvbjogZXJyb3JDb3VudCA+IDAgPyAnZmFpbHVyZScgOiAnc3VjY2VzcycgYXMgQ2hlY2tzQ3JlYXRlUGFyYW1zWydjb25jbHVzaW9uJ10sXG5cdFx0b3V0cHV0OiB7XG5cdFx0XHR0aXRsZTogQUNUSU9OX05BTUUsXG5cdFx0XHRzdW1tYXJ5OiBgJHtlcnJvckNvdW50fSBlcnJvcihzKSwgJHt3YXJuaW5nQ291bnR9IHdhcm5pbmcocykgZm91bmRgLFxuXHRcdFx0YW5ub3RhdGlvbnNcblx0XHR9XG5cdH07XG59XG5cbmFzeW5jIGZ1bmN0aW9uIHJ1bigpIHtcblx0Y29uc3Qgb2N0b2tpdCA9IG5ldyBHaXRIdWIoR0lUSFVCX1RPS0VOISk7XG5cblx0bGV0IGN1cnJlbnRTaGE6IHN0cmluZztcblx0bGV0IGluZm87XG5cdGxldCBsaW50RmlsZXM7XG5cdGlmIChjb250ZXh0Lmlzc3VlICYmIGNvbnRleHQuaXNzdWUubnVtYmVyKSB7XG5cdFx0aW5mbyA9IGF3YWl0IG9jdG9raXQuZ3JhcGhxbChgcXVlcnkoJG93bmVyOiBTdHJpbmchLCAkbmFtZTogU3RyaW5nISwgJHByTnVtYmVyOiBJbnQhKSB7XG5cdFx0XHRyZXBvc2l0b3J5KG93bmVyOiAkb3duZXIsIG5hbWU6ICRuYW1lKSB7XG5cdFx0XHRcdHB1bGxSZXF1ZXN0KG51bWJlcjogJHByTnVtYmVyKSB7XG5cdFx0XHRcdFx0ZmlsZXMoZmlyc3Q6IDEwMCkge1xuXHRcdFx0XHRcdFx0bm9kZXMge1xuXHRcdFx0XHRcdFx0XHRwYXRoXG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGNvbW1pdHMobGFzdDogMSkge1xuXHRcdFx0XHRcdFx0bm9kZXMge1xuXHRcdFx0XHRcdFx0XHRjb21taXQge1xuXHRcdFx0XHRcdFx0XHRcdG9pZFxuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fWAsXG5cdFx0e1xuXHRcdFx0b3duZXI6IGNvbnRleHQucmVwby5vd25lcixcblx0XHRcdG5hbWU6IGNvbnRleHQucmVwby5yZXBvLFxuXHRcdFx0cHJOdW1iZXI6IGNvbnRleHQuaXNzdWUubnVtYmVyXG5cdFx0fSk7XG5cdFx0Y3VycmVudFNoYSA9IGluZm8ucmVwb3NpdG9yeS5wdWxsUmVxdWVzdC5jb21taXRzLm5vZGVzWzBdLmNvbW1pdC5vaWQ7XG5cdFx0Y29uc3QgZmlsZXMgPSBpbmZvLnJlcG9zaXRvcnkucHVsbFJlcXVlc3QuZmlsZXMubm9kZXM7XG5cdFx0bGludEZpbGVzID0gZmlsZXMuZmlsdGVyKChmaWxlOiB7IHBhdGg6IHN0cmluZyB9KSA9PiBFWFRFTlNJT05TLmhhcyhleHRuYW1lKGZpbGUucGF0aCkpKS5tYXAoKGY6IHsgcGF0aDogc3RyaW5nIH0pID0+IGYucGF0aCk7XG5cdH0gZWxzZSB7XG5cdFx0aW5mbyA9IGF3YWl0IG9jdG9raXQucmVwb3MuZ2V0Q29tbWl0KHsgb3duZXI6IGNvbnRleHQucmVwby5vd25lciwgcmVwbzogY29udGV4dC5yZXBvLnJlcG8sIHJlZjogR0lUSFVCX1NIQSEgfSk7XG5cdFx0Y3VycmVudFNoYSA9IEdJVEhVQl9TSEEhO1xuXHRcdGNvbnN0IGZpbGVzID0gaW5mby5kYXRhLmZpbGVzO1xuXHRcdGxpbnRGaWxlcyA9IGZpbGVzLmZpbHRlcihmaWxlID0+IEVYVEVOU0lPTlMuaGFzKGV4dG5hbWUoZmlsZS5maWxlbmFtZSkpICYmICFmaWxlLmZpbGVuYW1lLmluY2x1ZGVzKCcuZC50cycpICYmIGZpbGUuc3RhdHVzICE9PSAncmVtb3ZlZCcgJiYgZmlsZS5zdGF0dXMgIT09ICdjaGFuZ2VkJykubWFwKGYgPT4gZi5maWxlbmFtZSk7XG5cdH1cblx0ZGVidWcoYENvbW1pdDogJHtjdXJyZW50U2hhfWApO1xuXG5cdGxldCBpZDogbnVtYmVyIHwgdW5kZWZpbmVkO1xuXHRjb25zdCBqb2JOYW1lID0gZ2V0SW5wdXQoJ2pvYi1uYW1lJyk7XG5cdGlmIChqb2JOYW1lKSB7XG5cdFx0Y29uc3QgY2hlY2tzID0gYXdhaXQgb2N0b2tpdC5jaGVja3MubGlzdEZvclJlZih7XG5cdFx0XHQuLi5jb250ZXh0LnJlcG8sXG5cdFx0XHRzdGF0dXM6ICdpbl9wcm9ncmVzcycsXG5cdFx0XHRyZWY6IGN1cnJlbnRTaGFcblx0XHR9KTtcblx0XHRjb25zdCBjaGVjayA9IGNoZWNrcy5kYXRhLmNoZWNrX3J1bnMuZmluZCgoeyBuYW1lIH0pID0+IG5hbWUudG9Mb3dlckNhc2UoKSA9PT0gam9iTmFtZS50b0xvd2VyQ2FzZSgpKTtcblx0XHRpZiAoY2hlY2spIGlkID0gY2hlY2suaWQ7XG5cdH1cblx0aWYgKCFpZCkge1xuXHRcdGlkID0gKGF3YWl0IG9jdG9raXQuY2hlY2tzLmNyZWF0ZSh7XG5cdFx0XHQuLi5jb250ZXh0LnJlcG8sXG5cdFx0XHRuYW1lOiBBQ1RJT05fTkFNRSxcblx0XHRcdGhlYWRfc2hhOiBjdXJyZW50U2hhLFxuXHRcdFx0c3RhdHVzOiAnaW5fcHJvZ3Jlc3MnLFxuXHRcdFx0c3RhcnRlZF9hdDogbmV3IERhdGUoKS50b0lTT1N0cmluZygpXG5cdFx0fSkpLmRhdGEuaWQ7XG5cdH1cblxuXHR0cnkge1xuXHRcdGNvbnN0IGxpbnRBbGwgPSBnZXRJbnB1dCgnbGludC1hbGwnKTtcblx0XHRjb25zdCB7IGNvbmNsdXNpb24sIG91dHB1dCB9ID0gYXdhaXQgbGludChsaW50QWxsID8gbnVsbCA6IGxpbnRGaWxlcyk7XG5cdFx0YXdhaXQgb2N0b2tpdC5jaGVja3MudXBkYXRlKHtcblx0XHRcdC4uLmNvbnRleHQucmVwbyxcblx0XHRcdGNoZWNrX3J1bl9pZDogaWQsXG5cdFx0XHRjb21wbGV0ZWRfYXQ6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKSxcblx0XHRcdGNvbmNsdXNpb24sXG5cdFx0XHRvdXRwdXRcblx0XHR9KTtcblx0XHRkZWJ1ZyhvdXRwdXQuc3VtbWFyeSk7XG5cdFx0aWYgKGNvbmNsdXNpb24gPT09ICdmYWlsdXJlJykgc2V0RmFpbGVkKG91dHB1dC5zdW1tYXJ5KTtcblx0fSBjYXRjaCAoZXJyb3IpIHtcblx0XHRhd2FpdCBvY3Rva2l0LmNoZWNrcy51cGRhdGUoe1xuXHRcdFx0Li4uY29udGV4dC5yZXBvLFxuXHRcdFx0Y2hlY2tfcnVuX2lkOiBpZCxcblx0XHRcdGNvbmNsdXNpb246ICdmYWlsdXJlJyxcblx0XHRcdGNvbXBsZXRlZF9hdDogbmV3IERhdGUoKS50b0lTT1N0cmluZygpXG5cdFx0fSk7XG5cdFx0c2V0RmFpbGVkKGVycm9yLm1lc3NhZ2UpO1xuXHR9XG59XG5cbnJ1bigpO1xuIl19